# 持久卷定义
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pv-claim
  labels:
    app: postgres
spec:
  storageClassName: rook-ceph-block
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100Gi
---
# 部署方式
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-deployment
  labels:
    app: postgres
spec:
  selector:
    matchLabels:
      app: postgres
  strategy:
    type: Recreate
  replicas: 2
  template:
    metadata:
      labels:
        app: postgres
    spec:
      volumes:
      - name: postgres-persistent-storage
        persistentVolumeClaim:
          claimName: postgres-pv-claim
      containers:
      - image: postgis/postgis:12-3.0
        name: postgres
        env:
        - name: PGDATA
          value: /pv/data
        - name: POSTGRES_PASSWORD
          value: postgres
        - name: TZ
          value: Asia/Shanghai
        # http://www.postgres.cn/docs/12/runtime-config-resource.html
        # https://wiki.postgresql.org/wiki/Tuning_Your_PostgreSQL_Server
        # shared_buffers 共享内存缓冲区量 推荐系统内存的25%（相应max_wal_size也要增加）.
        # max_wal_size 在自动 WAL 检查点之间允许 WAL 增长到的最大尺寸
        # work_mem 排序和哈希操作可用最大内存量（超过将写临时磁盘文件） 注意每个连接都可以使用这么多，根据并发连接数量设置.
        # maintenance_work_mem 维护性操作可用最大的内存量
        # effective_cache_size 更高的数值会使得索引扫描更可能被使用，更低的数值会使得顺序扫描更可能被使用。 推荐系统内存的50%到75%。
        # effective_io_concurrency 可以同时被执行的并发磁盘 I/O 操作的数量，固态存储上较高的值可能更好。
        # random_page_cost 减少这个值（相对于seq_page_cost）将导致系统更倾向于索引扫描，固态存储上较低的值可能更好。
        args: ["shared_buffers=4GB", "max_wal_size=2GB", "work_mem=512MB", "maintenance_work_mem=4GB", "effective_cache_size=8GB", "effective_io_concurrency=600", "random_page_cost=2"]
        ports:
        - containerPort: 5432
          name: postgres
        volumeMounts:
        - name: postgres-persistent-storage
          mountPath: /pv
---
# 服务
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  labels:
    app: postgres
spec:
  type: NodePort
  ports:
    - port: 5432
      nodePort: 30432
  selector:
    app: postgres